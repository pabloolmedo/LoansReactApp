{"version":3,"sources":["components/Header.js","components/Form.js","helpers.js","components/Message.js","components/Result.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Form","props","quantity","saveQuantity","term","saveTerm","saveTotal","saveLoading","useState","error","saveError","onSubmit","event","preventDefault","setTimeout","total","totalAmount","totalTerm","calculateTotal","className","type","placeholder","onChange","parseInt","target","value","Message","Result","toFixed","Spinner","App","component","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e8956d70.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = ({title}) => (         \r\n     <h1>{title}</h1>          \r\n     \r\n);\r\n\r\n\r\n\r\n\r\nexport default Header;","import React, { Fragment, useState } from 'react';\r\nimport { calculateTotal } from '../helpers';\r\n\r\nconst Form = (props) => {\r\n    const { quantity, saveQuantity, term, saveTerm, saveTotal, saveLoading } = props;\r\n    //definir state\r\n    const [error, saveError] = useState(false);\r\n\r\n    const calculateLoan = event => {\r\n        event.preventDefault();\r\n        //validar\r\n        if (quantity === 0 || term === '') {\r\n            saveError(true);\r\n            return;\r\n        }\r\n        saveError(false);\r\n\r\n\r\n        //habilitar el spinner\r\n        saveLoading(true);\r\n\r\n        //realizar cotizacion\r\n        setTimeout(() => {\r\n\r\n            const total = calculateTotal(quantity, term);\r\n\r\n            //una vez calculado guardar total\r\n            saveTotal(total);\r\n\r\n            //deshabilitar el spinner\r\n            saveLoading(false);\r\n        }, 3000);\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={calculateLoan}>\r\n\r\n                <div className=\"row\">\r\n                    <div>\r\n                        <label>Loan amount</label>\r\n                        <input\r\n                            className=\"u-full-width\"\r\n                            type=\"number\"\r\n                            placeholder=\"Example: 3000\"\r\n                            onChange={event => saveQuantity(parseInt(event.target.value))}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label>Term to pay</label>\r\n                        <select\r\n                            className=\"u-full-width\"\r\n                            onChange={event => saveTerm(parseInt(event.target.value))}\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"3\">3 months</option>\r\n                            <option value=\"6\">6 months</option>\r\n                            <option value=\"12\">12 months</option>\r\n                            <option value=\"24\">24 months</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type=\"submit\"\r\n                            value=\"Calculate\"\r\n                            className=\"button-primary u-full-width\"\r\n\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n            {(error) ? <p className=\"error\">All fields are required</p> : null}\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default Form;","export function calculateTotal(quantity, term) {\r\n    let totalAmount;\r\n    if (quantity <= 1000) {\r\n        totalAmount = quantity * .25;\r\n    } else if (quantity > 1000 && quantity <= 50000) {\r\n        totalAmount = quantity * .20;\r\n    } else if (quantity > 5000 && quantity <= 10000) {\r\n        totalAmount = quantity * .15;\r\n    } else {\r\n        totalAmount = quantity * .10;\r\n    }\r\n    //calcular el plazo\r\n    let totalTerm = 0;\r\n\r\n    switch (term) {\r\n        case 3:\r\n            totalTerm = quantity * .05;\r\n            break;\r\n        case 6:\r\n            totalTerm = quantity * .10;\r\n            break;\r\n        case 12:\r\n            totalTerm = quantity * .15;\r\n            break;\r\n        case 24:\r\n            totalTerm = quantity * .20;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n\r\n    return totalTerm + totalAmount + quantity;\r\n\r\n}","import React from 'react';\r\n\r\nconst Message = () => (\r\n    <p>Add an amount and term to pay to quote</p>\r\n\r\n);\r\n\r\n\r\nexport default Message;","import React from 'react';\r\n\r\nconst Result = ({ total, term, quantity }) => {\r\n    return (\r\n\r\n        <div className=\"u-full-width resultado\">\r\n            <h2>Summary</h2>\r\n            <p>The quantity requested is: ${quantity}</p>\r\n            <p>To pay in: {term} months</p>\r\n            <p>Your monthly payment is: ${(total / term).toFixed(2)}</p>\r\n            <p>The total amount is: ${(total).toFixed(2)}</p>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner\">\r\n            <div className=\"dot1\"></div>\r\n            <div className=\"dot2\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React, { Fragment, useState } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Message from './components/Message';\nimport Result from './components/Result';\nimport Spinner from './components/Spinner';\n\n\nfunction App() {\n\n  //definir el state\n  const [quantity, saveQuantity] = useState(0);\n  const [term, saveTerm] = useState('');\n  const [total, saveTotal] = useState(0);\n  const [loading, saveLoading] = useState(false);\n\n  let component;\n  if (loading) {\n    component = <Spinner />\n  } else if (total === 0) {\n    component = <Message />\n  } else {\n    component = <Result\n      total={total}\n      term={term}\n      quantity={quantity}\n    />\n  }\n\n  return (\n    <Fragment>\n      <Header\n        title=\"Loan quote\"\n      />\n      <div className=\"container\">\n        <Form\n          quantity={quantity}\n          saveQuantity={saveQuantity}\n          term={term}\n          saveTerm={saveTerm}\n          saveTotal={saveTotal}\n          saveLoading={saveLoading}\n        />\n        <div className=\"mensajes\">\n          {component}\n        </div>\n\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}